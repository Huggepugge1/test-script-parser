{
  "$schema": "https://tree-sitter.github.io/tree-sitter/assets/schemas/grammar.schema.json",
  "name": "test_script",
  "rules": {
    "source_file": {
      "type": "REPEAT",
      "content": {
        "type": "SYMBOL",
        "name": "test"
      }
    },
    "test": {
      "type": "SEQ",
      "members": [
        {
          "type": "SYMBOL",
          "name": "identifier"
        },
        {
          "type": "SYMBOL",
          "name": "open_paren"
        },
        {
          "type": "SYMBOL",
          "name": "string"
        },
        {
          "type": "SYMBOL",
          "name": "close_paren"
        },
        {
          "type": "SYMBOL",
          "name": "_statement"
        }
      ]
    },
    "_statement": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SEQ",
          "members": [
            {
              "type": "SYMBOL",
              "name": "_expression"
            },
            {
              "type": "SYMBOL",
              "name": "semicolon"
            }
          ]
        },
        {
          "type": "SYMBOL",
          "name": "block"
        },
        {
          "type": "SYMBOL",
          "name": "comment"
        },
        {
          "type": "SYMBOL",
          "name": "for_loop"
        }
      ]
    },
    "_expression": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "declaration"
        },
        {
          "type": "SYMBOL",
          "name": "assignment"
        },
        {
          "type": "SYMBOL",
          "name": "identifier"
        },
        {
          "type": "SYMBOL",
          "name": "string"
        },
        {
          "type": "SYMBOL",
          "name": "number"
        },
        {
          "type": "SYMBOL",
          "name": "regex"
        },
        {
          "type": "SYMBOL",
          "name": "binary_expression"
        },
        {
          "type": "SYMBOL",
          "name": "function_call"
        },
        {
          "type": "SYMBOL",
          "name": "built_in_function_call"
        }
      ]
    },
    "function_call": {
      "type": "SEQ",
      "members": [
        {
          "type": "SYMBOL",
          "name": "identifier"
        },
        {
          "type": "SYMBOL",
          "name": "open_paren"
        },
        {
          "type": "CHOICE",
          "members": [
            {
              "type": "SYMBOL",
              "name": "argument_list"
            },
            {
              "type": "BLANK"
            }
          ]
        },
        {
          "type": "SYMBOL",
          "name": "close_paren"
        }
      ]
    },
    "built_in_function_call": {
      "type": "SEQ",
      "members": [
        {
          "type": "SYMBOL",
          "name": "built_in_function"
        },
        {
          "type": "SYMBOL",
          "name": "open_paren"
        },
        {
          "type": "CHOICE",
          "members": [
            {
              "type": "SYMBOL",
              "name": "argument_list"
            },
            {
              "type": "BLANK"
            }
          ]
        },
        {
          "type": "SYMBOL",
          "name": "close_paren"
        }
      ]
    },
    "argument_list": {
      "type": "SEQ",
      "members": [
        {
          "type": "SYMBOL",
          "name": "_expression"
        },
        {
          "type": "REPEAT",
          "content": {
            "type": "SEQ",
            "members": [
              {
                "type": "STRING",
                "value": ","
              },
              {
                "type": "SYMBOL",
                "name": "_expression"
              }
            ]
          }
        }
      ]
    },
    "built_in_function": {
      "type": "CHOICE",
      "members": [
        {
          "type": "STRING",
          "value": "print"
        },
        {
          "type": "STRING",
          "value": "println"
        },
        {
          "type": "STRING",
          "value": "input"
        },
        {
          "type": "STRING",
          "value": "output"
        }
      ]
    },
    "binary_expression": {
      "type": "CHOICE",
      "members": [
        {
          "type": "PREC_LEFT",
          "value": 2,
          "content": {
            "type": "SEQ",
            "members": [
              {
                "type": "SYMBOL",
                "name": "_expression"
              },
              {
                "type": "SYMBOL",
                "name": "multiplication"
              },
              {
                "type": "SYMBOL",
                "name": "_expression"
              }
            ]
          }
        },
        {
          "type": "PREC_LEFT",
          "value": 2,
          "content": {
            "type": "SEQ",
            "members": [
              {
                "type": "SYMBOL",
                "name": "_expression"
              },
              {
                "type": "SYMBOL",
                "name": "division"
              },
              {
                "type": "SYMBOL",
                "name": "_expression"
              }
            ]
          }
        },
        {
          "type": "PREC_LEFT",
          "value": 1,
          "content": {
            "type": "SEQ",
            "members": [
              {
                "type": "SYMBOL",
                "name": "_expression"
              },
              {
                "type": "SYMBOL",
                "name": "addition"
              },
              {
                "type": "SYMBOL",
                "name": "_expression"
              }
            ]
          }
        },
        {
          "type": "PREC_LEFT",
          "value": 1,
          "content": {
            "type": "SEQ",
            "members": [
              {
                "type": "SYMBOL",
                "name": "_expression"
              },
              {
                "type": "SYMBOL",
                "name": "subtraction"
              },
              {
                "type": "SYMBOL",
                "name": "_expression"
              }
            ]
          }
        }
      ]
    },
    "declaration": {
      "type": "SEQ",
      "members": [
        {
          "type": "SYMBOL",
          "name": "assignment_keyword"
        },
        {
          "type": "SYMBOL",
          "name": "identifier"
        },
        {
          "type": "SYMBOL",
          "name": "colon"
        },
        {
          "type": "SYMBOL",
          "name": "type"
        },
        {
          "type": "SYMBOL",
          "name": "assignment_operator"
        },
        {
          "type": "SYMBOL",
          "name": "_expression"
        }
      ]
    },
    "assignment_keyword": {
      "type": "CHOICE",
      "members": [
        {
          "type": "STRING",
          "value": "let"
        },
        {
          "type": "STRING",
          "value": "const"
        }
      ]
    },
    "type": {
      "type": "CHOICE",
      "members": [
        {
          "type": "STRING",
          "value": "string"
        },
        {
          "type": "STRING",
          "value": "int"
        },
        {
          "type": "STRING",
          "value": "regex"
        }
      ]
    },
    "assignment": {
      "type": "SEQ",
      "members": [
        {
          "type": "SYMBOL",
          "name": "identifier"
        },
        {
          "type": "SYMBOL",
          "name": "assignment_operator"
        },
        {
          "type": "SYMBOL",
          "name": "_expression"
        }
      ]
    },
    "for_loop": {
      "type": "SEQ",
      "members": [
        {
          "type": "SYMBOL",
          "name": "for_keyword"
        },
        {
          "type": "SYMBOL",
          "name": "iterable_assignment"
        },
        {
          "type": "SYMBOL",
          "name": "_statement"
        }
      ]
    },
    "iterable_assignment": {
      "type": "SEQ",
      "members": [
        {
          "type": "SYMBOL",
          "name": "identifier"
        },
        {
          "type": "SYMBOL",
          "name": "colon"
        },
        {
          "type": "SYMBOL",
          "name": "type"
        },
        {
          "type": "SYMBOL",
          "name": "in_operator"
        },
        {
          "type": "SYMBOL",
          "name": "_expression"
        }
      ]
    },
    "for_keyword": {
      "type": "STRING",
      "value": "for"
    },
    "in_operator": {
      "type": "STRING",
      "value": "in"
    },
    "block": {
      "type": "SEQ",
      "members": [
        {
          "type": "SYMBOL",
          "name": "open_brace"
        },
        {
          "type": "REPEAT",
          "content": {
            "type": "SYMBOL",
            "name": "_statement"
          }
        },
        {
          "type": "SYMBOL",
          "name": "close_brace"
        }
      ]
    },
    "identifier": {
      "type": "PATTERN",
      "value": "[a-zA-Z_][\\w\\d_]*"
    },
    "string": {
      "type": "PATTERN",
      "value": "\"([^\"\\\\]|\\\\.)*\""
    },
    "number": {
      "type": "PATTERN",
      "value": "\\d+"
    },
    "regex": {
      "type": "PATTERN",
      "value": "`[^`]*`"
    },
    "comment": {
      "type": "PATTERN",
      "value": "\\/\\/.*"
    },
    "addition": {
      "type": "STRING",
      "value": "+"
    },
    "subtraction": {
      "type": "STRING",
      "value": "-"
    },
    "multiplication": {
      "type": "STRING",
      "value": "*"
    },
    "division": {
      "type": "STRING",
      "value": "/"
    },
    "colon": {
      "type": "STRING",
      "value": ":"
    },
    "assignment_operator": {
      "type": "STRING",
      "value": "="
    },
    "semicolon": {
      "type": "STRING",
      "value": ";"
    },
    "open_paren": {
      "type": "STRING",
      "value": "("
    },
    "close_paren": {
      "type": "STRING",
      "value": ")"
    },
    "open_brace": {
      "type": "STRING",
      "value": "{"
    },
    "close_brace": {
      "type": "STRING",
      "value": "}"
    }
  },
  "extras": [
    {
      "type": "PATTERN",
      "value": "\\s"
    }
  ],
  "conflicts": [],
  "precedences": [],
  "externals": [],
  "inline": [],
  "supertypes": []
}
